---
import { getAlbumPhotos } from "@components/Library.astro";
import CustomImage from "@components/ImageCard.astro";
const { frontmatter } = Astro.props;

const photos = await getAlbumPhotos(`${frontmatter.album}`);
if (!photos || photos.length === 0) throw new Error(`"${frontmatter.album}" returned no photos`);
---

<html lang="en">
  <head>
    <title>{frontmatter.title}</title>
    <meta name="description" content="Interactive photo carousel for {frontmatter.album}" />
    <style>
      .carousel-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        max-width: 960px;
        margin: auto;
      }
      .carousel-track {
        display: flex;
        transition: transform 0.5s ease-in-out;
      }
      .carousel-slide {
        min-width: 100%;
        box-sizing: border-box;
        cursor: pointer;
      }
      .controls {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
      }
      .modal {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: rgba(0,0,0,0.8);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .modal img {
        max-width: 90%;
        max-height: 90%;
        border-radius: 8px;
      }
    </style>
  </head>

  <body>
    <section class="carousel-container">
      <div class="carousel-track" id="carouselTrack">
        {photos.map((photo, index) => (
          <div class="carousel-slide" data-src={photo.src}>
            <CustomImage src={photo.src} alt={photo.alt ?? `Photo ${index + 1}`} class="clickable-image" />
          </div>
        ))}
      </div>

      <div class="controls">
        <button id="prevBtn">⬅️ Prev</button>
        <button id="toggleBtn">⏯️ Play/Pause</button>
        <button id="nextBtn">➡️ Next</button>
      </div>
    </section>

    <div id="modal" class="modal">
      <img id="modalImage" src="" alt="Large view" />
    </div>

    <script type="module">
      const track = document.getElementById('carouselTrack');
      const slides = document.querySelectorAll('.carousel-slide');
      const modal = document.getElementById('modal');
      const modalImage = document.getElementById('modalImage');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const toggleBtn = document.getElementById('toggleBtn');

      let currentIndex = 0;
      let isPlaying = true;
      const slideCount = slides.length;

      function updateCarousel() {
        if (track) {
          track.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
      }

      function nextSlide() {
        currentIndex = (currentIndex + 1) % slideCount;
        updateCarousel();
      }

      function prevSlide() {
        currentIndex = (currentIndex - 1 + slideCount) % slideCount;
        updateCarousel();
      }

      function togglePlay() {
        isPlaying = !isPlaying;
        toggleBtn.textContent = isPlaying ? '⏸️ Pause' : '▶️ Play';
      }

      function openModal(src) {
        if (modal && modalImage && src) {
          modalImage.src = src;
          modal.style.display = 'flex';
        }
      }

      function closeModal() {
        if (modal) {
          modal.style.display = 'none';
          modalImage.src = '';
        }
      }

      // Event listeners
      prevBtn?.addEventListener('click', prevSlide);
      nextBtn?.addEventListener('click', nextSlide);
      toggleBtn?.addEventListener('click', togglePlay);
      modal?.addEventListener('click', closeModal);

      slides.forEach(slide => {
        slide.addEventListener('click', () => {
          const src = slide.getAttribute('data-src');
          openModal(src);
        });
      });

      // Autoplay loop
      setInterval(() => {
        if (isPlaying) nextSlide();
      }, 4000); // 4 seconds per slide
    </script>
  </body>
</html>

