---
// AstroDoc: https://docs.astro.build/en/recipes/build-custom-img-component/
// Recipe: https://docs.astro.build/en/recipes/dynamically-importing-images/#recipe

import {
  getAlbumPhotos,
  getRandomImage,
  getFileName,
} from "@components/Library.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  imagePath?: string;
  altText: string;
  twCSS?: string;
  maxWidth?: number;
  sourceType?: "local" | "remote";
  showCaption?: boolean;
  fallbackSrc?: string;
  [key: string]: any;
}

const {
  imagePath,
  altText,
  twCSS = "",
  maxWidth = 800,
  sourceType = "local",
  showCaption = false,
  fallbackSrc = "/placeholder.svg",
  ...rest
} = Astro.props as Props;

// Import all images from the specified directory.
const images: Record<string, () => Promise<{ default: ImageMetadata }>> =
  import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/*.{jpeg,jpg,png,gif,svg}"
  );

// Get the file name from the image path
const imageName = imagePath ? getFileName(imagePath) : undefined;

// Determine image key: use imagePath if valid, else fallback to random
const imageKey = imageName && images[`/src/assets/images/${imageName}`]
  ? `/src/assets/images/${imageName}`
  : getRandomImage(images);

// Error handling for image retrieval
if (sourceType === "local" && (!imageKey || !images[imageKey])) {
  console.error("No valid local image found for key:", imageKey);
  return;
}

// Asynchronously get the image if local
let image: ImageMetadata | undefined = undefined;
if (sourceType === "local") {
  const imageModule = await images[imageKey]();
  image = imageModule.default;
}
---

<div class={twCSS}>
  {sourceType === "local" && image ? (
    <figure>
      <Image
        src={image}
        alt={altText}
        width={maxWidth}
        loading="lazy"
        {...rest}
      />
      {showCaption && altText ? (
        <figcaption class="text-center text-sm mt-2 text-gray-600">
          {altText}
        </figcaption>
      ) : null}
    </figure>
  ) : (
    <figure>
      <img
        src={imagePath ?? fallbackSrc}
        alt={altText}
        width={maxWidth}
        loading="lazy"
        onerror={`this.onerror=null;this.src='${fallbackSrc}'`}
        {...rest}
      />
      {showCaption && altText ? (
        <figcaption class="text-center text-sm mt-2 text-gray-600">
          {altText}
        </figcaption>
      ) : null}
    </figure>
  )}
</div>
