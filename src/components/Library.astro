---
export function getRndValue(images: any) {
  const randomIndex = Math.floor(Math.random() * images.length);
  return images[randomIndex];
}

export async function getLocalImages() {
  const imageObject = await import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/*.{jpeg,jpg,png,gif,svg}"
  );
  const imageKeys = Object.keys(imageObject);
  return imageKeys;
}

export async function getImgMeta(imgPath: string) {
  console.log("getImgMeta: ", imgPath);
  return imgPath;
}

export async function getAlbumPhotos(album: any): Promise<any[]> {
  try {
    let photos: any[] = [];

    if (album !== "local") {
      const photoURL = `https://api.skicyclerun.com/getphotosrandom?bucketName=skicyclerun.lib&albumPath=albums/${album}/&numPhotos=150`;
      const res = await fetch(photoURL);
      const data = await res.json();

      // ‚úÖ Defensive check: only map if data is an array
      if (Array.isArray(data)) {
        photos = data.map((p: any, i: number) => {
          const src = typeof p === "string" ? p : p?.src;
          return {
            src,
            altText: p?.altText ?? `Photo ${i + 1}`,
            sourceType: "remote",
          };
        });
      } else {
        console.warn("‚ö†Ô∏è Unexpected response format from photo API:", data);
        photos = [];
      }

      // ‚úÖ Preserve fallback logic
      if ((data as any)?.message === "Internal server error") {
        photos = (await getAlbumPhotos("default")) || (await getLocalImages());
      }
    } else {
      const imagePaths = await getLocalImages();
      const imageModules = import.meta.glob<{ default: ImageMetadata }>(
        "/src/assets/images/*.{jpeg,jpg,png,gif,svg}"
      );

      photos = await Promise.all(
        imagePaths.map(async (path: string, i: number) => {
          const mod = imageModules[path];
          const img = mod ? await mod() : null;
          return {
            src: img?.default?.src ?? undefined, // ‚úÖ Use the actual image path
            altText: `Photo ${i + 1}`,
            sourceType: "local",
          };
        })
      );
    }

    return photos;
  } catch (error) {
    console.log("ERROR:getAlbumPhotos", error);
    throw error;
  }
}

export function getRandomImage(
  imagesObject: Record<string, () => Promise<{ default: ImageMetadata }>>
) {
  const imagePaths = Object.keys(imagesObject);
  const randomIndex = Math.floor(Math.random() * imagePaths.length);
  const randomImagePath = imagePaths[randomIndex];

  return randomImagePath;
}

export function findKeyWithValue(
  searchString: string,
  obj: Record<string, any>
) {
  for (const key in obj) {
    console.log("findKeyWithValue: key == ", key);
    if (key.includes(searchString)) {
      return { key, value: obj[key] };
    }
  }
  return null;
}

// export function findSubstring(obj: Record<string, any>, target: string): any {
//   for (const key in obj) {
//     if (key.includes(target)) {
//       return obj[key];
//     }
//   }
//   return null;
// }

export function findSubstring(
  imageName: string,
  imageModules: Record<string, any>
) {
  for (const key in imageModules) {
    if (key.endsWith(imageName)) {
      return imageModules[key];
    }
  }
  console.warn("‚ùå No match found for:", imageName);
  return null;
}

export function getImage(imgSrc: unknown, imgObj: Record<string, any>) {
  if (typeof imgSrc !== "string") {
    console.warn("‚ö†Ô∏è getImage received non-string imgSrc:", imgSrc);
    return null;
  }

  console.log("üîç Available image keys:", Object.keys(imgObj));
  console.log("üîç Looking for match with:", imgSrc);

  const result = findSubstring(imgSrc, imgObj);
  if (!result) {
    console.warn("‚ö†Ô∏è getImage could not find match for:", imgSrc);
  }
  return result;
}

export function getFileName(path: unknown): string {
  if (typeof path === "object" && path !== null && "src" in path) {
    path = (path as any).src;
  }

  if (typeof path !== "string") return "imageNotFound";

  const cleanPath = path.split("?")[0];

  // Bail if it's a hashed Astro path or remote URL
  if (cleanPath.startsWith("/_astro/") || cleanPath.startsWith("http")) {
    return "imageNotFound";
  }

  const matchResult = cleanPath.match(
    /\/([\w-]+)(?:\.[\w]+)*\.(svg|jpeg|jpg|png|gif)$/i
  );
  if (matchResult) {
    return `${matchResult[1]}.${matchResult[2]}`;
  }
  console.warn("‚ö†Ô∏è - getFileName received non-string path:", path);
  return "imageNotFound";
}
---
