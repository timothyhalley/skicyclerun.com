---
export function getRndValue(images: any) {
  const randomIndex = Math.floor(Math.random() * images.length);
  return images[randomIndex];
}

export async function getLocalImages() {
  const imageObject = await import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/*.{jpeg,jpg,png,gif,svg}"
  );
  const imageKeys = Object.keys(imageObject);
  console.log("[DEBUG] ðŸŒŽ Local Image: ", imageKeys);
  return imageKeys;
}

export async function getImgMeta(imgPath: string) {
  console.log("getImgMeta: ", imgPath);
  // const imgObj = await import.meta.glob<{ default: ImageMetadata }>(imgPath);
  // console.log("getImgMeta meta: ", imgObj);
  return imgPath;
}

export async function getAlbumPhotos(album: any): Promise<any[]> {
  try {
    let photos = [];
    if (album !== "local") {
      const photoURL = `https://api.skicyclerun.com/getphotosrandom?bucketName=skicyclerun.lib&albumPath=albums/${album}/&numPhotos=150`;
      console.log("[DEBUG] ðŸŒŽ URL: ", photoURL);
      const res = await fetch(photoURL);
      photos = await res.json();
      console.log("[DEBUG] ðŸŒŽ Photos: ", photos);

      // Likely a miss match on album name - or S3 unavail where then local SVG are served
      if (photos.message === "Internal server error") {
        photos = (await getAlbumPhotos("default")) || (await getLocalImages());
      }
    } else {
      photos = await getLocalImages();
    }

    // console.log("DEBUG: LIB AFTER: ðŸ‘‰", photos);
    return photos;
  } catch (error) {
    console.log("ERROR:getAlbumPhotos", error);
    throw error;
  }
}

export function getRandomImage(
  imagesObject: Record<string, () => Promise<{ default: ImageMetadata }>>
) {
  const imagePaths = Object.keys(imagesObject);
  const randomIndex = Math.floor(Math.random() * imagePaths.length);
  const randomImagePath = imagePaths[randomIndex];

  return randomImagePath;
}

export function findKeyWithValue(
  searchString: string,
  obj: Record<string, any>
) {
  for (const key in obj) {
    console.log("findKeyWithValue: key == ", key);
    if (key.includes(searchString)) {
      return { key, value: obj[key] };
    }
  }
  return null; // Return null if no match is found
}

export function findSubstring(array: any, target: any) {
  for (const entry of array) {
    if (entry.includes(target)) {
      return entry;
    }
  }
  return null; // Return null if the substring is not found in any entry
}

export function getImage(imgSrc: string, imgObj: object) {
  const result = findSubstring(imgObj, imgSrc);
  console.log("GetImage: result: ", result);
  return result;
}

export function getFileName(path: string | null): string {
  // console.log("DEBUG FUNCTION getFileName: ", path);
  if (path != null) {
    const matchResult = path.match(/[-_\w]+[.][\w]+$/i);
    if (matchResult) {
      return matchResult[0];
    } else {
      return "imageNotMatched";
    }
  } else {
    return "imageNotFound";
  }
}
---
